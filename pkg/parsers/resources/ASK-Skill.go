package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// ASKSkill Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ask-skill.html
type ASKSkill struct {
	Type       string             `yaml:"Type"`
	Properties ASKSkillProperties `yaml:"Properties"`
	Condition  interface{}        `yaml:"Condition,omitempty"`
	Metadata   interface{}        `yaml:"Metadata,omitempty"`
	DependsOn  interface{}        `yaml:"DependsOn,omitempty"`
}

// ASKSkill Properties
type ASKSkillProperties struct {
	VendorId                    interface{} `yaml:"VendorId"`
	SkillPackage                interface{} `yaml:"SkillPackage"`
	AuthenticationConfiguration interface{} `yaml:"AuthenticationConfiguration"`
}

// NewASKSkill constructor creates a new ASKSkill
func NewASKSkill(properties ASKSkillProperties, deps ...interface{}) ASKSkill {
	return ASKSkill{
		Type:       "Alexa::ASK::Skill",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseASKSkill parses ASKSkill
func ParseASKSkill(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"

	// Resources
	var resource ASKSkill
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	// Outputs

	outputs = types.TemplateObject{
		name: types.TemplateObject{
			"Description": name + " Object",
			"Value": map[string]interface{}{
				"Ref": name,
			},
			"Export": map[string]interface{}{
				"Name": map[string]interface{}{
					"Fn::Sub": "${AWS::StackName}-ASKSkill-" + name,
				},
			},
		},
	}

	return
}

// ParseASKSkill validator
func (resource ASKSkill) Validate() []error {
	return resource.Properties.Validate()
}

// ParseASKSkillProperties validator
func (resource ASKSkillProperties) Validate() []error {
	errors := []error{}
	return errors
}
