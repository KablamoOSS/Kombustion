package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// AppStreamFleet Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-fleet.html
type AppStreamFleet struct {
	Type       string                   `yaml:"Type"`
	Properties AppStreamFleetProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// AppStreamFleet Properties
type AppStreamFleetProperties struct {
	Description                 interface{} `yaml:"Description,omitempty"`
	DisconnectTimeoutInSeconds  interface{} `yaml:"DisconnectTimeoutInSeconds,omitempty"`
	DisplayName                 interface{} `yaml:"DisplayName,omitempty"`
	EnableDefaultInternetAccess interface{} `yaml:"EnableDefaultInternetAccess,omitempty"`
	FleetType                   interface{} `yaml:"FleetType,omitempty"`
	ImageArn                    interface{} `yaml:"ImageArn,omitempty"`
	ImageName                   interface{} `yaml:"ImageName,omitempty"`
	InstanceType                interface{} `yaml:"InstanceType"`
	MaxUserDurationInSeconds    interface{} `yaml:"MaxUserDurationInSeconds,omitempty"`
	Name                        interface{} `yaml:"Name,omitempty"`
	VpcConfig                   interface{} `yaml:"VpcConfig,omitempty"`
	DomainJoinInfo              interface{} `yaml:"DomainJoinInfo,omitempty"`
	ComputeCapacity             interface{} `yaml:"ComputeCapacity"`
}

// NewAppStreamFleet constructor creates a new AppStreamFleet
func NewAppStreamFleet(properties AppStreamFleetProperties, deps ...interface{}) AppStreamFleet {
	return AppStreamFleet{
		Type:       "AWS::AppStream::Fleet",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseAppStreamFleet parses AppStreamFleet
func ParseAppStreamFleet(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"

	// Resources
	var resource AppStreamFleet
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	// Outputs

	outputs = types.TemplateObject{
		name: types.TemplateObject{
			"Description": name + " Object",
			"Value": map[string]interface{}{
				"Ref": name,
			},
			"Export": map[string]interface{}{
				"Name": map[string]interface{}{
					"Fn::Sub": "${AWS::StackName}-AppStreamFleet-" + name,
				},
			},
		},
	}

	return
}

// ParseAppStreamFleet validator
func (resource AppStreamFleet) Validate() []error {
	return resource.Properties.Validate()
}

// ParseAppStreamFleetProperties validator
func (resource AppStreamFleetProperties) Validate() []error {
	errors := []error{}
	return errors
}
