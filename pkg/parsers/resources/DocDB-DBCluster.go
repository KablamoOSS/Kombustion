package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// DocDBDBCluster Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-docdb-dbcluster.html
type DocDBDBCluster struct {
	Type       string                   `yaml:"Type"`
	Properties DocDBDBClusterProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// DocDBDBCluster Properties
type DocDBDBClusterProperties struct {
	BackupRetentionPeriod       interface{} `yaml:"BackupRetentionPeriod,omitempty"`
	DBClusterIdentifier         interface{} `yaml:"DBClusterIdentifier,omitempty"`
	DBClusterParameterGroupName interface{} `yaml:"DBClusterParameterGroupName,omitempty"`
	DBSubnetGroupName           interface{} `yaml:"DBSubnetGroupName,omitempty"`
	EngineVersion               interface{} `yaml:"EngineVersion,omitempty"`
	KmsKeyId                    interface{} `yaml:"KmsKeyId,omitempty"`
	MasterUserPassword          interface{} `yaml:"MasterUserPassword,omitempty"`
	MasterUsername              interface{} `yaml:"MasterUsername,omitempty"`
	Port                        interface{} `yaml:"Port,omitempty"`
	PreferredBackupWindow       interface{} `yaml:"PreferredBackupWindow,omitempty"`
	PreferredMaintenanceWindow  interface{} `yaml:"PreferredMaintenanceWindow,omitempty"`
	SnapshotIdentifier          interface{} `yaml:"SnapshotIdentifier,omitempty"`
	StorageEncrypted            interface{} `yaml:"StorageEncrypted,omitempty"`
	AvailabilityZones           interface{} `yaml:"AvailabilityZones,omitempty"`
	Tags                        interface{} `yaml:"Tags,omitempty"`
	VpcSecurityGroupIds         interface{} `yaml:"VpcSecurityGroupIds,omitempty"`
}

// NewDocDBDBCluster constructor creates a new DocDBDBCluster
func NewDocDBDBCluster(properties DocDBDBClusterProperties, deps ...interface{}) DocDBDBCluster {
	return DocDBDBCluster{
		Type:       "AWS::DocDB::DBCluster",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseDocDBDBCluster parses DocDBDBCluster
func ParseDocDBDBCluster(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"

	// Resources
	var resource DocDBDBCluster
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	// Outputs

	outputs = types.TemplateObject{
		name: types.TemplateObject{
			"Description": name + " Object",
			"Value": map[string]interface{}{
				"Ref": name,
			},
			"Export": map[string]interface{}{
				"Name": map[string]interface{}{
					"Fn::Sub": "${AWS::StackName}-DocDBDBCluster-" + name,
				},
			},
		},
	}

	return
}

// ParseDocDBDBCluster validator
func (resource DocDBDBCluster) Validate() []error {
	return resource.Properties.Validate()
}

// ParseDocDBDBClusterProperties validator
func (resource DocDBDBClusterProperties) Validate() []error {
	errors := []error{}
	return errors
}
