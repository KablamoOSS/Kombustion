package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	//
	// "fmt"
	//
	//
	//"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	//
)

// EC2NetworkAclEntry Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-acl-entry.html
type EC2NetworkAclEntry struct {
	Type       string                       `yaml:"Type"`
	Properties EC2NetworkAclEntryProperties `yaml:"Properties"`
	Condition  interface{}                  `yaml:"Condition,omitempty"`
	Metadata   interface{}                  `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                  `yaml:"DependsOn,omitempty"`
}

// EC2NetworkAclEntry Properties
type EC2NetworkAclEntryProperties struct {
	CidrBlock     interface{} `yaml:"CidrBlock"`
	Egress        interface{} `yaml:"Egress,omitempty"`
	Ipv6CidrBlock interface{} `yaml:"Ipv6CidrBlock,omitempty"`
	NetworkAclId  interface{} `yaml:"NetworkAclId"`
	Protocol      interface{} `yaml:"Protocol"`
	RuleAction    interface{} `yaml:"RuleAction"`
	RuleNumber    interface{} `yaml:"RuleNumber"`
	PortRange     interface{} `yaml:"PortRange,omitempty"`
	Icmp          interface{} `yaml:"Icmp,omitempty"`
}

// NewEC2NetworkAclEntry constructor creates a new EC2NetworkAclEntry
func NewEC2NetworkAclEntry(properties EC2NetworkAclEntryProperties, deps ...interface{}) EC2NetworkAclEntry {
	return EC2NetworkAclEntry{
		Type:       "AWS::EC2::NetworkAclEntry",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2NetworkAclEntry parses EC2NetworkAclEntry
func ParseEC2NetworkAclEntry(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"

	// Resources
	var resource EC2NetworkAclEntry
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	// Outputs

	outputs = types.TemplateObject{
		name: types.TemplateObject{
			"Description": name + " Object",
			"Value": map[string]interface{}{
				"Ref": name,
			},
			"Export": map[string]interface{}{
				"Name": map[string]interface{}{
					"Fn::Sub": "${AWS::StackName}-EC2NetworkAclEntry-" + name,
				},
			},
		},
	}

	return
}

// ParseEC2NetworkAclEntry validator
func (resource EC2NetworkAclEntry) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2NetworkAclEntryProperties validator
func (resource EC2NetworkAclEntryProperties) Validate() []error {
	errors := []error{}
	return errors
}
