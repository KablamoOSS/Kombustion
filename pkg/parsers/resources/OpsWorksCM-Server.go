package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// OpsWorksCMServer Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworkscm-server.html
type OpsWorksCMServer struct {
	Type       string                     `yaml:"Type"`
	Properties OpsWorksCMServerProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// OpsWorksCMServer Properties
type OpsWorksCMServerProperties struct {
	BackupId                   interface{} `yaml:"BackupId,omitempty"`
	BackupRetentionCount       interface{} `yaml:"BackupRetentionCount,omitempty"`
	DisableAutomatedBackup     interface{} `yaml:"DisableAutomatedBackup,omitempty"`
	Engine                     interface{} `yaml:"Engine,omitempty"`
	EngineModel                interface{} `yaml:"EngineModel,omitempty"`
	EngineVersion              interface{} `yaml:"EngineVersion,omitempty"`
	InstanceProfileArn         interface{} `yaml:"InstanceProfileArn"`
	InstanceType               interface{} `yaml:"InstanceType"`
	KeyPair                    interface{} `yaml:"KeyPair,omitempty"`
	PreferredBackupWindow      interface{} `yaml:"PreferredBackupWindow,omitempty"`
	PreferredMaintenanceWindow interface{} `yaml:"PreferredMaintenanceWindow,omitempty"`
	ServerName                 interface{} `yaml:"ServerName,omitempty"`
	ServiceRoleArn             interface{} `yaml:"ServiceRoleArn"`
	EngineAttributes           interface{} `yaml:"EngineAttributes,omitempty"`
	SecurityGroupIds           interface{} `yaml:"SecurityGroupIds,omitempty"`
	SubnetIds                  interface{} `yaml:"SubnetIds,omitempty"`
}

// NewOpsWorksCMServer constructor creates a new OpsWorksCMServer
func NewOpsWorksCMServer(properties OpsWorksCMServerProperties, deps ...interface{}) OpsWorksCMServer {
	return OpsWorksCMServer{
		Type:       "AWS::OpsWorksCM::Server",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseOpsWorksCMServer parses OpsWorksCMServer
func ParseOpsWorksCMServer(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"

	// Resources
	var resource OpsWorksCMServer
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	// Outputs

	outputs = types.TemplateObject{
		name: types.TemplateObject{
			"Description": name + " Object",
			"Value": map[string]interface{}{
				"Ref": name,
			},
			"Export": map[string]interface{}{
				"Name": map[string]interface{}{
					"Fn::Sub": "${AWS::StackName}-OpsWorksCMServer-" + name,
				},
			},
		},
	}

	return
}

// ParseOpsWorksCMServer validator
func (resource OpsWorksCMServer) Validate() []error {
	return resource.Properties.Validate()
}

// ParseOpsWorksCMServerProperties validator
func (resource OpsWorksCMServerProperties) Validate() []error {
	errors := []error{}
	return errors
}
