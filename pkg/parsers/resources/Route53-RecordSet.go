package resources

// Code generated by go generate; DO NOT EDIT.
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
)

// Route53RecordSet Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
type Route53RecordSet struct {
	Type       string                     `yaml:"Type"`
	Properties Route53RecordSetProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// Route53RecordSet Properties
type Route53RecordSetProperties struct {
	Comment          interface{} `yaml:"Comment,omitempty"`
	Failover         interface{} `yaml:"Failover,omitempty"`
	HealthCheckId    interface{} `yaml:"HealthCheckId,omitempty"`
	HostedZoneId     interface{} `yaml:"HostedZoneId,omitempty"`
	HostedZoneName   interface{} `yaml:"HostedZoneName,omitempty"`
	MultiValueAnswer interface{} `yaml:"MultiValueAnswer,omitempty"`
	Name             interface{} `yaml:"Name"`
	Region           interface{} `yaml:"Region,omitempty"`
	SetIdentifier    interface{} `yaml:"SetIdentifier,omitempty"`
	TTL              interface{} `yaml:"TTL,omitempty"`
	Type             interface{} `yaml:"Type"`
	Weight           interface{} `yaml:"Weight,omitempty"`
	ResourceRecords  interface{} `yaml:"ResourceRecords,omitempty"`
	GeoLocation      interface{} `yaml:"GeoLocation,omitempty"`
	AliasTarget      interface{} `yaml:"AliasTarget,omitempty"`
}

// NewRoute53RecordSet constructor creates a new Route53RecordSet
func NewRoute53RecordSet(properties Route53RecordSetProperties, deps ...interface{}) Route53RecordSet {
	return Route53RecordSet{
		Type:       "AWS::Route53::RecordSet",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseRoute53RecordSet parses Route53RecordSet
func ParseRoute53RecordSet(
	name string,
	data string,
) (
	source string,
	conditions types.TemplateObject,
	metadata types.TemplateObject,
	mappings types.TemplateObject,
	outputs types.TemplateObject,
	parameters types.TemplateObject,
	resources types.TemplateObject,
	transform types.TemplateObject,
	errors []error,
) {
	source = "kombustion-core-resources"

	// Resources
	var resource Route53RecordSet
	err := yaml.Unmarshal([]byte(data), &resource)

	if err != nil {
		errors = append(errors, err)
		return
	}

	if validateErrs := resource.Properties.Validate(); len(errors) > 0 {
		errors = append(errors, validateErrs...)
		return
	}

	resources = types.TemplateObject{name: resource}

	// Outputs

	outputs = types.TemplateObject{
		name: types.TemplateObject{
			"Description": name + " Object",
			"Value": map[string]interface{}{
				"Ref": name,
			},
			"Export": map[string]interface{}{
				"Name": map[string]interface{}{
					"Fn::Sub": "${AWS::StackName}-Route53RecordSet-" + name,
				},
			},
		},
	}

	return
}

// ParseRoute53RecordSet validator
func (resource Route53RecordSet) Validate() []error {
	return resource.Properties.Validate()
}

// ParseRoute53RecordSetProperties validator
func (resource Route53RecordSetProperties) Validate() []error {
	errors := []error{}
	return errors
}
