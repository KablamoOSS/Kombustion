package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// AmazonMQBroker Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amazonmq-broker.html
type AmazonMQBroker struct {
	Type       string                   `yaml:"Type"`
	Properties AmazonMQBrokerProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// AmazonMQBroker Properties
type AmazonMQBrokerProperties struct {
	AutoMinorVersionUpgrade    interface{}                         `yaml:"AutoMinorVersionUpgrade"`
	BrokerName                 interface{}                         `yaml:"BrokerName"`
	DeploymentMode             interface{}                         `yaml:"DeploymentMode"`
	EngineType                 interface{}                         `yaml:"EngineType"`
	EngineVersion              interface{}                         `yaml:"EngineVersion"`
	HostInstanceType           interface{}                         `yaml:"HostInstanceType"`
	PubliclyAccessible         interface{}                         `yaml:"PubliclyAccessible"`
	MaintenanceWindowStartTime *properties.BrokerMaintenanceWindow `yaml:"MaintenanceWindowStartTime,omitempty"`
	SecurityGroups             interface{}                         `yaml:"SecurityGroups,omitempty"`
	SubnetIds                  interface{}                         `yaml:"SubnetIds,omitempty"`
	Users                      interface{}                         `yaml:"Users"`
	Configuration              *properties.BrokerConfigurationId   `yaml:"Configuration,omitempty"`
}

// NewAmazonMQBroker constructor creates a new AmazonMQBroker
func NewAmazonMQBroker(properties AmazonMQBrokerProperties, deps ...interface{}) AmazonMQBroker {
	return AmazonMQBroker{
		Type:       "AWS::AmazonMQ::Broker",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseAmazonMQBroker parses AmazonMQBroker
func ParseAmazonMQBroker(name string, data string) (cf types.TemplateObject, err error) {
	var resource AmazonMQBroker
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: AmazonMQBroker - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseAmazonMQBroker validator
func (resource AmazonMQBroker) Validate() []error {
	return resource.Properties.Validate()
}

// ParseAmazonMQBrokerProperties validator
func (resource AmazonMQBrokerProperties) Validate() []error {
	errs := []error{}
	if resource.AutoMinorVersionUpgrade == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'AutoMinorVersionUpgrade'"))
	}
	if resource.BrokerName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'BrokerName'"))
	}
	if resource.DeploymentMode == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'DeploymentMode'"))
	}
	if resource.EngineType == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'EngineType'"))
	}
	if resource.EngineVersion == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'EngineVersion'"))
	}
	if resource.HostInstanceType == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'HostInstanceType'"))
	}
	if resource.PubliclyAccessible == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'PubliclyAccessible'"))
	}
	if resource.Users == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Users'"))
	}
	return errs
}
