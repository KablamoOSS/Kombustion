package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// AmazonMQConfiguration Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amazonmq-configuration.html
type AmazonMQConfiguration struct {
	Type       string                          `yaml:"Type"`
	Properties AmazonMQConfigurationProperties `yaml:"Properties"`
	Condition  interface{}                     `yaml:"Condition,omitempty"`
	Metadata   interface{}                     `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                     `yaml:"DependsOn,omitempty"`
}

// AmazonMQConfiguration Properties
type AmazonMQConfigurationProperties struct {
	Data          interface{} `yaml:"Data"`
	Description   interface{} `yaml:"Description,omitempty"`
	EngineType    interface{} `yaml:"EngineType"`
	EngineVersion interface{} `yaml:"EngineVersion"`
	Name          interface{} `yaml:"Name"`
}

// NewAmazonMQConfiguration constructor creates a new AmazonMQConfiguration
func NewAmazonMQConfiguration(properties AmazonMQConfigurationProperties, deps ...interface{}) AmazonMQConfiguration {
	return AmazonMQConfiguration{
		Type:       "AWS::AmazonMQ::Configuration",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseAmazonMQConfiguration parses AmazonMQConfiguration
func ParseAmazonMQConfiguration(name string, data string) (cf types.TemplateObject, err error) {
	var resource AmazonMQConfiguration
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: AmazonMQConfiguration - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseAmazonMQConfiguration validator
func (resource AmazonMQConfiguration) Validate() []error {
	return resource.Properties.Validate()
}

// ParseAmazonMQConfigurationProperties validator
func (resource AmazonMQConfigurationProperties) Validate() []error {
	errs := []error{}
	if resource.Data == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Data'"))
	}
	if resource.EngineType == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'EngineType'"))
	}
	if resource.EngineVersion == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'EngineVersion'"))
	}
	if resource.Name == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Name'"))
	}
	return errs
}
