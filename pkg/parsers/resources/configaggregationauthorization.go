package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// ConfigAggregationAuthorization Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-aggregationauthorization.html
type ConfigAggregationAuthorization struct {
	Type       string                                   `yaml:"Type"`
	Properties ConfigAggregationAuthorizationProperties `yaml:"Properties"`
	Condition  interface{}                              `yaml:"Condition,omitempty"`
	Metadata   interface{}                              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                              `yaml:"DependsOn,omitempty"`
}

// ConfigAggregationAuthorization Properties
type ConfigAggregationAuthorizationProperties struct {
	AuthorizedAccountId interface{} `yaml:"AuthorizedAccountId"`
	AuthorizedAwsRegion interface{} `yaml:"AuthorizedAwsRegion"`
}

// NewConfigAggregationAuthorization constructor creates a new ConfigAggregationAuthorization
func NewConfigAggregationAuthorization(properties ConfigAggregationAuthorizationProperties, deps ...interface{}) ConfigAggregationAuthorization {
	return ConfigAggregationAuthorization{
		Type:       "AWS::Config::AggregationAuthorization",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseConfigAggregationAuthorization parses ConfigAggregationAuthorization
func ParseConfigAggregationAuthorization(name string, data string) (cf types.TemplateObject, err error) {
	var resource ConfigAggregationAuthorization
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: ConfigAggregationAuthorization - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseConfigAggregationAuthorization validator
func (resource ConfigAggregationAuthorization) Validate() []error {
	return resource.Properties.Validate()
}

// ParseConfigAggregationAuthorizationProperties validator
func (resource ConfigAggregationAuthorizationProperties) Validate() []error {
	errs := []error{}
	if resource.AuthorizedAccountId == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'AuthorizedAccountId'"))
	}
	if resource.AuthorizedAwsRegion == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'AuthorizedAwsRegion'"))
	}
	return errs
}
