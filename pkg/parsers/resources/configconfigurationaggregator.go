package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// ConfigConfigurationAggregator Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-configurationaggregator.html
type ConfigConfigurationAggregator struct {
	Type       string                                  `yaml:"Type"`
	Properties ConfigConfigurationAggregatorProperties `yaml:"Properties"`
	Condition  interface{}                             `yaml:"Condition,omitempty"`
	Metadata   interface{}                             `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                             `yaml:"DependsOn,omitempty"`
}

// ConfigConfigurationAggregator Properties
type ConfigConfigurationAggregatorProperties struct {
	ConfigurationAggregatorName   interface{}                                                      `yaml:"ConfigurationAggregatorName"`
	OrganizationAggregationSource *properties.ConfigurationAggregatorOrganizationAggregationSource `yaml:"OrganizationAggregationSource,omitempty"`
	AccountAggregationSources     interface{}                                                      `yaml:"AccountAggregationSources,omitempty"`
}

// NewConfigConfigurationAggregator constructor creates a new ConfigConfigurationAggregator
func NewConfigConfigurationAggregator(properties ConfigConfigurationAggregatorProperties, deps ...interface{}) ConfigConfigurationAggregator {
	return ConfigConfigurationAggregator{
		Type:       "AWS::Config::ConfigurationAggregator",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseConfigConfigurationAggregator parses ConfigConfigurationAggregator
func ParseConfigConfigurationAggregator(name string, data string) (cf types.TemplateObject, err error) {
	var resource ConfigConfigurationAggregator
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: ConfigConfigurationAggregator - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseConfigConfigurationAggregator validator
func (resource ConfigConfigurationAggregator) Validate() []error {
	return resource.Properties.Validate()
}

// ParseConfigConfigurationAggregatorProperties validator
func (resource ConfigConfigurationAggregatorProperties) Validate() []error {
	errs := []error{}
	if resource.ConfigurationAggregatorName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ConfigurationAggregatorName'"))
	}
	return errs
}
