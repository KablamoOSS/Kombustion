package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// EC2VPCEndpointConnectionNotification Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointconnectionnotification.html
type EC2VPCEndpointConnectionNotification struct {
	Type       string                                         `yaml:"Type"`
	Properties EC2VPCEndpointConnectionNotificationProperties `yaml:"Properties"`
	Condition  interface{}                                    `yaml:"Condition,omitempty"`
	Metadata   interface{}                                    `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                                    `yaml:"DependsOn,omitempty"`
}

// EC2VPCEndpointConnectionNotification Properties
type EC2VPCEndpointConnectionNotificationProperties struct {
	ConnectionNotificationArn interface{} `yaml:"ConnectionNotificationArn"`
	ServiceId                 interface{} `yaml:"ServiceId,omitempty"`
	VPCEndpointId             interface{} `yaml:"VPCEndpointId,omitempty"`
	ConnectionEvents          interface{} `yaml:"ConnectionEvents"`
}

// NewEC2VPCEndpointConnectionNotification constructor creates a new EC2VPCEndpointConnectionNotification
func NewEC2VPCEndpointConnectionNotification(properties EC2VPCEndpointConnectionNotificationProperties, deps ...interface{}) EC2VPCEndpointConnectionNotification {
	return EC2VPCEndpointConnectionNotification{
		Type:       "AWS::EC2::VPCEndpointConnectionNotification",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2VPCEndpointConnectionNotification parses EC2VPCEndpointConnectionNotification
func ParseEC2VPCEndpointConnectionNotification(name string, data string) (cf types.TemplateObject, err error) {
	var resource EC2VPCEndpointConnectionNotification
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: EC2VPCEndpointConnectionNotification - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseEC2VPCEndpointConnectionNotification validator
func (resource EC2VPCEndpointConnectionNotification) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2VPCEndpointConnectionNotificationProperties validator
func (resource EC2VPCEndpointConnectionNotificationProperties) Validate() []error {
	errs := []error{}
	if resource.ConnectionNotificationArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ConnectionNotificationArn'"))
	}
	if resource.ConnectionEvents == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ConnectionEvents'"))
	}
	return errs
}
