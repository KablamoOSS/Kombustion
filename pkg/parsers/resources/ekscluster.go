package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// EKSCluster Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-cluster.html
type EKSCluster struct {
	Type       string               `yaml:"Type"`
	Properties EKSClusterProperties `yaml:"Properties"`
	Condition  interface{}          `yaml:"Condition,omitempty"`
	Metadata   interface{}          `yaml:"Metadata,omitempty"`
	DependsOn  interface{}          `yaml:"DependsOn,omitempty"`
}

// EKSCluster Properties
type EKSClusterProperties struct {
	Name               interface{}                           `yaml:"Name,omitempty"`
	RoleArn            interface{}                           `yaml:"RoleArn"`
	Version            interface{}                           `yaml:"Version,omitempty"`
	ResourcesVpcConfig *properties.ClusterResourcesVpcConfig `yaml:"ResourcesVpcConfig"`
}

// NewEKSCluster constructor creates a new EKSCluster
func NewEKSCluster(properties EKSClusterProperties, deps ...interface{}) EKSCluster {
	return EKSCluster{
		Type:       "AWS::EKS::Cluster",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEKSCluster parses EKSCluster
func ParseEKSCluster(name string, data string) (cf types.TemplateObject, err error) {
	var resource EKSCluster
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: EKSCluster - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseEKSCluster validator
func (resource EKSCluster) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEKSClusterProperties validator
func (resource EKSClusterProperties) Validate() []error {
	errs := []error{}
	if resource.RoleArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'RoleArn'"))
	}
	if resource.ResourcesVpcConfig == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ResourcesVpcConfig'"))
	} else {
		errs = append(errs, resource.ResourcesVpcConfig.Validate()...)
	}
	return errs
}
