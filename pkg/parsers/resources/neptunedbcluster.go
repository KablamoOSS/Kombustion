package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// NeptuneDBCluster Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html
type NeptuneDBCluster struct {
	Type       string                     `yaml:"Type"`
	Properties NeptuneDBClusterProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// NeptuneDBCluster Properties
type NeptuneDBClusterProperties struct {
	BackupRetentionPeriod       interface{} `yaml:"BackupRetentionPeriod,omitempty"`
	DBClusterIdentifier         interface{} `yaml:"DBClusterIdentifier,omitempty"`
	DBClusterParameterGroupName interface{} `yaml:"DBClusterParameterGroupName,omitempty"`
	DBSubnetGroupName           interface{} `yaml:"DBSubnetGroupName,omitempty"`
	IamAuthEnabled              interface{} `yaml:"IamAuthEnabled,omitempty"`
	KmsKeyId                    interface{} `yaml:"KmsKeyId,omitempty"`
	Port                        interface{} `yaml:"Port,omitempty"`
	PreferredBackupWindow       interface{} `yaml:"PreferredBackupWindow,omitempty"`
	PreferredMaintenanceWindow  interface{} `yaml:"PreferredMaintenanceWindow,omitempty"`
	SnapshotIdentifier          interface{} `yaml:"SnapshotIdentifier,omitempty"`
	StorageEncrypted            interface{} `yaml:"StorageEncrypted,omitempty"`
	AvailabilityZones           interface{} `yaml:"AvailabilityZones,omitempty"`
	Tags                        interface{} `yaml:"Tags,omitempty"`
	VpcSecurityGroupIds         interface{} `yaml:"VpcSecurityGroupIds,omitempty"`
}

// NewNeptuneDBCluster constructor creates a new NeptuneDBCluster
func NewNeptuneDBCluster(properties NeptuneDBClusterProperties, deps ...interface{}) NeptuneDBCluster {
	return NeptuneDBCluster{
		Type:       "AWS::Neptune::DBCluster",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseNeptuneDBCluster parses NeptuneDBCluster
func ParseNeptuneDBCluster(name string, data string) (cf types.TemplateObject, err error) {
	var resource NeptuneDBCluster
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: NeptuneDBCluster - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseNeptuneDBCluster validator
func (resource NeptuneDBCluster) Validate() []error {
	return resource.Properties.Validate()
}

// ParseNeptuneDBClusterProperties validator
func (resource NeptuneDBClusterProperties) Validate() []error {
	errs := []error{}
	return errs
}
