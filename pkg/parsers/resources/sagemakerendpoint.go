package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// SageMakerEndpoint Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html
type SageMakerEndpoint struct {
	Type       string                      `yaml:"Type"`
	Properties SageMakerEndpointProperties `yaml:"Properties"`
	Condition  interface{}                 `yaml:"Condition,omitempty"`
	Metadata   interface{}                 `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                 `yaml:"DependsOn,omitempty"`
}

// SageMakerEndpoint Properties
type SageMakerEndpointProperties struct {
	EndpointConfigName interface{} `yaml:"EndpointConfigName"`
	EndpointName       interface{} `yaml:"EndpointName,omitempty"`
	Tags               interface{} `yaml:"Tags,omitempty"`
}

// NewSageMakerEndpoint constructor creates a new SageMakerEndpoint
func NewSageMakerEndpoint(properties SageMakerEndpointProperties, deps ...interface{}) SageMakerEndpoint {
	return SageMakerEndpoint{
		Type:       "AWS::SageMaker::Endpoint",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSageMakerEndpoint parses SageMakerEndpoint
func ParseSageMakerEndpoint(name string, data string) (cf types.TemplateObject, err error) {
	var resource SageMakerEndpoint
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: SageMakerEndpoint - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseSageMakerEndpoint validator
func (resource SageMakerEndpoint) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSageMakerEndpointProperties validator
func (resource SageMakerEndpointProperties) Validate() []error {
	errs := []error{}
	if resource.EndpointConfigName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'EndpointConfigName'"))
	}
	return errs
}
