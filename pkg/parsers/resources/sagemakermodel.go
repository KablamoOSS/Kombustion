package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// SageMakerModel Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html
type SageMakerModel struct {
	Type       string                   `yaml:"Type"`
	Properties SageMakerModelProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// SageMakerModel Properties
type SageMakerModelProperties struct {
	ExecutionRoleArn interface{}                          `yaml:"ExecutionRoleArn"`
	ModelName        interface{}                          `yaml:"ModelName,omitempty"`
	VpcConfig        *properties.ModelVpcConfig           `yaml:"VpcConfig,omitempty"`
	Tags             interface{}                          `yaml:"Tags,omitempty"`
	PrimaryContainer *properties.ModelContainerDefinition `yaml:"PrimaryContainer"`
}

// NewSageMakerModel constructor creates a new SageMakerModel
func NewSageMakerModel(properties SageMakerModelProperties, deps ...interface{}) SageMakerModel {
	return SageMakerModel{
		Type:       "AWS::SageMaker::Model",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSageMakerModel parses SageMakerModel
func ParseSageMakerModel(name string, data string) (cf types.TemplateObject, err error) {
	var resource SageMakerModel
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: SageMakerModel - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseSageMakerModel validator
func (resource SageMakerModel) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSageMakerModelProperties validator
func (resource SageMakerModelProperties) Validate() []error {
	errs := []error{}
	if resource.ExecutionRoleArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ExecutionRoleArn'"))
	}
	if resource.PrimaryContainer == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'PrimaryContainer'"))
	} else {
		errs = append(errs, resource.PrimaryContainer.Validate()...)
	}
	return errs
}
