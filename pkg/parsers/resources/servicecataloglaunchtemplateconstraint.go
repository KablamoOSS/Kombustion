package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// ServiceCatalogLaunchTemplateConstraint Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-launchtemplateconstraint.html
type ServiceCatalogLaunchTemplateConstraint struct {
	Type       string                                           `yaml:"Type"`
	Properties ServiceCatalogLaunchTemplateConstraintProperties `yaml:"Properties"`
	Condition  interface{}                                      `yaml:"Condition,omitempty"`
	Metadata   interface{}                                      `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                                      `yaml:"DependsOn,omitempty"`
}

// ServiceCatalogLaunchTemplateConstraint Properties
type ServiceCatalogLaunchTemplateConstraintProperties struct {
	AcceptLanguage interface{} `yaml:"AcceptLanguage,omitempty"`
	Description    interface{} `yaml:"Description,omitempty"`
	PortfolioId    interface{} `yaml:"PortfolioId"`
	ProductId      interface{} `yaml:"ProductId"`
	Rules          interface{} `yaml:"Rules"`
}

// NewServiceCatalogLaunchTemplateConstraint constructor creates a new ServiceCatalogLaunchTemplateConstraint
func NewServiceCatalogLaunchTemplateConstraint(properties ServiceCatalogLaunchTemplateConstraintProperties, deps ...interface{}) ServiceCatalogLaunchTemplateConstraint {
	return ServiceCatalogLaunchTemplateConstraint{
		Type:       "AWS::ServiceCatalog::LaunchTemplateConstraint",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseServiceCatalogLaunchTemplateConstraint parses ServiceCatalogLaunchTemplateConstraint
func ParseServiceCatalogLaunchTemplateConstraint(name string, data string) (cf types.TemplateObject, err error) {
	var resource ServiceCatalogLaunchTemplateConstraint
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: ServiceCatalogLaunchTemplateConstraint - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseServiceCatalogLaunchTemplateConstraint validator
func (resource ServiceCatalogLaunchTemplateConstraint) Validate() []error {
	return resource.Properties.Validate()
}

// ParseServiceCatalogLaunchTemplateConstraintProperties validator
func (resource ServiceCatalogLaunchTemplateConstraintProperties) Validate() []error {
	errs := []error{}
	if resource.PortfolioId == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'PortfolioId'"))
	}
	if resource.ProductId == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ProductId'"))
	}
	if resource.Rules == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Rules'"))
	}
	return errs
}
