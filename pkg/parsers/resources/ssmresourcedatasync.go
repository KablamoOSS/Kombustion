package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// SSMResourceDataSync Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-resourcedatasync.html
type SSMResourceDataSync struct {
	Type       string                        `yaml:"Type"`
	Properties SSMResourceDataSyncProperties `yaml:"Properties"`
	Condition  interface{}                   `yaml:"Condition,omitempty"`
	Metadata   interface{}                   `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                   `yaml:"DependsOn,omitempty"`
}

// SSMResourceDataSync Properties
type SSMResourceDataSyncProperties struct {
	BucketName   interface{} `yaml:"BucketName"`
	BucketPrefix interface{} `yaml:"BucketPrefix,omitempty"`
	BucketRegion interface{} `yaml:"BucketRegion"`
	KMSKeyArn    interface{} `yaml:"KMSKeyArn,omitempty"`
	SyncFormat   interface{} `yaml:"SyncFormat"`
	SyncName     interface{} `yaml:"SyncName"`
}

// NewSSMResourceDataSync constructor creates a new SSMResourceDataSync
func NewSSMResourceDataSync(properties SSMResourceDataSyncProperties, deps ...interface{}) SSMResourceDataSync {
	return SSMResourceDataSync{
		Type:       "AWS::SSM::ResourceDataSync",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSSMResourceDataSync parses SSMResourceDataSync
func ParseSSMResourceDataSync(name string, data string) (cf types.TemplateObject, err error) {
	var resource SSMResourceDataSync
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: SSMResourceDataSync - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseSSMResourceDataSync validator
func (resource SSMResourceDataSync) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSSMResourceDataSyncProperties validator
func (resource SSMResourceDataSyncProperties) Validate() []error {
	errs := []error{}
	if resource.BucketName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'BucketName'"))
	}
	if resource.BucketRegion == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'BucketRegion'"))
	}
	if resource.SyncFormat == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'SyncFormat'"))
	}
	if resource.SyncName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'SyncName'"))
	}
	return errs
}
